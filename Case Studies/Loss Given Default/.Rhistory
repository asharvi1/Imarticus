data = read.csv('2008.csv')
getwd()
setwd("/Users/ravikiran/dektop/R assignment/")
setwd("/Users/ravikiran/dektop/R assignment/")
q()
q()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_color <- flags[ , 11:17]
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[ ,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply()
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
table(flags$population)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length, iris$Species, summary)
tapply(iris$Sepal.Length, iris$Species, round(mean, 2))
tapply(iris$Sepal.Length, iris$Species, mean)
head(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
?apply
apply(iris[, 1:4], mean)
library(mtcars)
library(datasets)
data("mtcars")
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
dim(mtcars)
colnames(mtcars)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
sample <- tapply(mtcars$hp, mtcars$cyl, mean)
sample
sample(1)
sample(2)
sample
class(sample)
sample[1]
sample[3] - sample[1]
debug(ls)
ls
ls
?ls
swirl()
library(swirl)
swirl()
library(iris)
library(datasets)
data("iris")
?lapply
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
ls
debug(ls)
ls
x <- c(rnorm(10), runif(10))
install.packages('RMySQL')
install.packages("arules")
library("arules", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
dataset = longley
linear_model = lm(formula = Employed ~ GNP, data = dataset)
# Visualising the residual values in the graph to identify the outliers
qqnorm(resid(linear_model))
plot(dataset$GNP, dataset$Employed)
plot(dataset$GNP, dataset$Employed, main = 'Simple Linear', xlab = 'GNP', ylab = 'Employed')
abline(lm(Employed ~ GNP))
abline(lm(Employed ~ GNP, data = dataset))
plot(dataset$GNP, dataset$Employed, main = 'Simple Linear', xlab = 'GNP', ylab = 'Employed', col = 'red')
abline(lm(Employed ~ GNP, data = dataset))
plot(dataset$GNP, dataset$Employed, main = 'Simple Linear', xlab = 'GNP', ylab = 'Employed', col = 'red', pch = 21)
abline(lm(Employed ~ GNP, data = dataset))
plot(dataset$GNP, dataset$Employed, main = 'Simple Linear', xlab = 'GNP', ylab = 'Employed', col = 'red', pch = 16)
abline(lm(Employed ~ GNP, data = dataset))
View(dataset)
dataset = dataset[, c(2,7)]
View(dataset)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
ggplot(data = dataset, aes(x =  dataset$GNP, y = dataset$Employed)) +
geom_point(shape = 1) +
geom_smooth(method = lm)
ggplot(data = dataset, aes(x =  dataset$GNP, y = dataset$Employed)) +
geom_point(shape = 2) +
geom_smooth(method = lm)
ggplot(data = dataset, aes(x =  dataset$GNP, y = dataset$Employed)) +
geom_point(shape = 3) +
geom_smooth(method = lm)
ggplot(data = dataset, aes(x =  dataset$GNP, y = dataset$Employed)) +
geom_point(shape = 4) +
geom_smooth(method = lm)
ggplot(data = dataset, aes(x =  dataset$GNP, y = dataset$Employed)) +
geom_point() +
geom_smooth(method = lm)
load("/Users/ravikiran/Desktop/R/Air Quality UCI/airquality.RData")
setwd("~/Desktop/Imarticus/Academics/class practice/R")
dataset = mtcars
head(dataset)
is.na(dataset)
head(dataset)
tail(dataset)
write.csv(mtcars)
write.csv(mtcars, '/Users/ravikiran/Desktop/Imarticus/Academics/class practice/mtcars.csv')
write.csv(mtcars, '/Users/ravikiran/Desktop/Imarticus/Academics/class practice/R/mtcars.csv')
dataset = read.csv('mtcars.csv')
head(dataset)
tail(dataset)
str(dataset)
View(dataset)
length(dataset)
nrow(dataset)
ncol(dataset)
colnames(dataset)
colnames(dataset)[2:]
colnames(dataset)[2:12]
cor(x = dataset[2], y = dataset[3])
install.packages("corrplot")
paste(cor(x = dataset[2], y = dataset[3]), cor(x = dataset[2], y = dataset[5]),
cor(x = dataset[2], y = dataset[7]), cor(x = dataset[2], y = dataset[10]),
cor(x = dataset[2], y = dataset[11]), cor(x = dataset[2], y = dataset[12]))
cor(dataset)
cor(x = dataset)
cor(mtcars)
cor(dataset[2:12])
library("corrplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
corrplot(dataset[2:12])
corrplot(dataset[,2:12])
corrplot(mtcars)
corrplot(mtcars)
library("openair", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
corPlot(mtcars)
corPlot(dataset[2:12])# Checking the correlation between the variables with the openair package
plot(density(dataset[c(3, 5, 7, 10, 11, 12)]))
plot(density(dataset$cyl))
plot(density(dataset$cyl), main = 'Desnity plot for the cyl')
# Creating a regression model
dataset = dataset[1:3,5,7,10:12]
# Creating a regression model
regressor = lm(mpg~cyl+hp+wt+am+gear+carb, data = dataset)
summary(regressor)
# Creating a regression model
regressor = lm(mpg~cyl+wt+am+gear+carb, data = dataset)
summary(regressor)
fitted(regressor)
residuals(regressor)
mean(residuals(regressor))
plot(regressor)
setwd("~/Desktop/Imarticus/Academics/class practice/R/Case Studies/Loss Given Default")
dataset = read.csv('R_Module_Day_5.2_Data_Case_Study_Loss_Given_Default(1).csv')
View(dataset)
dataset = read.csv('R_Module_Day_5.2_Data_Case_Study_Loss_Given_Default(1).csv')
head(dataset)
str(dataset)
dataset = dataset[2:7]
str(dataset)
dataset$Number.of.Vehicles = as.factor(dataset$Number.of.Vehicles, levels = c(1,2,3,4))
dataset$Number.of.Vehicles = as.factor(dataset$Number.of.Vehicles, level = c(1,2,3,4))
dataset$Number.of.Vehicles = as.factor(dataset$Number.of.Vehicles, c(1,2,3,4))
dataset$Number.of.Vehicles = as.factor(dataset$Number.of.Vehicles)
str(dataset)
getwd()
regressor = lm(formula = Losses.in.Thousands~., data = dataset)
fitted(regressor)
regressor = lm(Losses.in.Thousands~., data = dataset)
plot(regressor)
colnames(dataset) = c('Age', 'YearsExp', 'NumberofVeh', 'Gender', 'Married', 'Losses')
regressor = lm(Losses~., data = dataset)
fitted(regressor)
regressor = lm(formula = Losses ~ ., data = dataset)
fitted(regressor)
regressor = lm(formula = Losses ~ Age+YearsExp+NumberofVeh+Gender+Married, data = dataset)
fitted(regressor)
View(regressor)
regressor = lm(formula = Losses ~ Age+YearsExp+NumberofVeh+Gender+Married, data = dataset)
fitted(regressor)[1:10]
residuals(regressor)[1:10]
dataset = read.csv('R_Module_Day_5.2_Data_Case_Study_Loss_Given_Default(1).csv')
dataset = dataset[2:7]
dataset$Number.of.Vehicles = as.factor(dataset$Number.of.Vehicles)
dataset = read.csv('R_Module_Day_5.2_Data_Case_Study_Loss_Given_Default(1).csv')
head(dataset)
dataset = dataset[2:7]
dataset$Number.of.Vehicles = as.factor(dataset$Number.of.Vehicles)
train_set = sample(1:nrow(dataset), 0.7*nrow(dataset))
set.seed(123)
train_set = sample(1:nrow(dataset), 0.7*nrow(dataset))
set.seed(123)
train_rec = sample(1:nrow(dataset), 0.7*nrow(dataset))
train_set = dataset[train_rec, ]
View(train_set)
train_set = sort(train_set)
nrow(train_set)
test_set = dataset[-train_rec]
View(test_set)
test_set = dataset[-train_rec,]
regressor = lm(formula = Losses.in.Thousands~., data = train_set)
summary(regressor)
qqplot(regressor)
qqplot(regressor$residuals)
qqplot(regressor$residuals,y = train_set)
qqplot(regressor$residuals,y = train_set$Number.of.Vehicles)
rstudent = rstudent(regressor, infl = influence(regressor, do.coef = TRUE))
rstudent
head(rstudent)
rstudent_frame = as.data.frame(rstudent)
View(rstudent_frame)
head(rstudent_frame)
View(rstudent_frame)
outliers = subset(rstudent_frame, rstudent_frame$rstudent < -1.5 | rstudent_frame$rstudent > 1.5)
View(outliers)
head(outliers)
View(outliers)
outliers[8645]
outliers$rstudent[8645]
outliers$rstudent[4398]
View(rstudent_frame)
outliers_rownames = rownames(outliers)
outliers_rownames(which('4398'))
outliers$rstudent[4398]
outliers_rownames = as.numeric(outliers_rownames)
train_set_no = train_set[-outliers_rownames, ]
train_set_no = train_set[outliers_rownames, ]
is.na(train_set_no)
sum(is.na(train_set_no))
View(train_set_no)
write.csv(train_set_no, file = 'no_outlier_data.csv')
train_set_o = train_set[outliers_rownames, ]
train_set_no = train_set[-outliers_rownames,]
sum(is.na(train_set_no))
write.csv(train_set_no, file = 'no_outlier_data.csv')
write.csv(train_set_o, file = 'outlier_data.csv')
regressor_1 = lm(formula = Losses.in.Thousands~., data = train_set_no)
summary(regressor_1)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("quantreg")
detach("package:car", unload=TRUE)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
vif = vif(regressor_1)
vif
cor(train_set_no$Age, train_set_no$Years.of.Experience)
train_set_no_age = train_set_no[, 2:6]
regressor_2 = lm(formula = Losses.in.Thousands~., data = train_set_no_age)
summary(regressor_2)
summary(regressor_1)
summary(regressor_2)
vif = vif(regressor_2)
vif
install.packages("QuantPsyc")
library("QuantPsyc", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
abs(lm.beta(regressor_2))
regressor_final = lm(formula = Losses.in.Thousands~., data = train_set_no_age)
summary(regressor_final)
View(train_set_no_age)
regressor_final_1 = lm(formula = Losses.in.Thousands~Years.of.Experience+Gender+Married, data = train_set_no_age)
summary(regressor_final_1)
train_pred = fitted(regressor_final_1)
write.csv(train_pred, 'train_pred.csv')
train_pred_full = cbind(train_set_no_age, train_pred)
write.csv(train_pred_full, 'train_pred_full.csv')
test_pred = predict(regressor_final_1, newdata = test_set)
test_pred_full = cbind(test_set, test_pred)
write.csv(test_pred_full, 'test_pred_full.csv')
View(test_pred_full)
MAPE = mean(abs(residuals(regressor_final_1)))*100
MAPE
